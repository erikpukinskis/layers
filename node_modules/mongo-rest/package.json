{
  "name": "mongo-rest",
  "description": "A simple to use mongoose REST API.",
  "version": "3.0.7",
  "author": {
    "name": "Matias Meno",
    "email": "m@tias.me"
  },
  "main": "./index.js",
  "private": false,
  "dependencies": {
    "underscore": "1.x",
    "inflection": "1.x"
  },
  "devDependencies": {
    "mocha": "*",
    "coffee-script": "*",
    "should": "*"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/enyo/mongo-rest.git"
  },
  "homepage": "https://github.com/enyo/mongo-rest",
  "readme": "# MongoREST Version 3.0.7\n\n![Build status](https://travis-ci.org/enyo/mongo-rest.png)\n\nThis is an [express][] [node][] [module][node modules] to provide basic [REST][] support to\naccess [mongodb][] [documents][mongodb documents] via [mongoose][].\n\nIt then serves the content as JSON (if requested with `Accept: application/json`)\nor renders the entities as HTML (you have to provide the templates for it).\n\nYou can configure how MongoREST looks up the templates, and which resources \nshould be served as JSON (to avoid leaking private information).\n\nIt is built to be used with [ember](http://emberjs.com) and should work out of the box.\n\n\n[express]: http://www.expressjs.com/\n[node]: http://www.nodejs.org\n[node modules]: http://nodejs.org/api/modules.html\n[REST]: http://en.wikipedia.org/wiki/Representational_state_transfer\n[mongodb]: http://www.mongodb.org\n[mongodb documents]: http://www.mongodb.org/display/DOCS/Documents\n[mongoose]: http://www.mongoosejs.com\n\n\n\nI use [semantic versioning][] and my [tag script][] to tag this module.\n\nThe library is fully tested with the [mocha test framework][] and the [should assertion\nlibrary][]. If you contribute please make sure that you write tests for it.\n\n\n[semantic versioning]: http://semver.org/\n[tag script]: https://github.com/enyo/tag\n[mocha test framework]: http://visionmedia.github.com/mocha/\n[should assertion library]: https://github.com/visionmedia/should.js\n\n\nThe latest **stable** version is always in the `master` branch. The `develop` branch is\ncutting edge where tests regularely won't completely pass. Only checkout the `develop` branch\nif you want to contribute.\n\n\n## Installation\n\nWith npm:\n\n    npm install mongo-rest\n\nOr simply download the lates version from here, and put it in `node_modules/mongo-rest`.\n\n\n## Usage\n\nThe usage of this module is quite straight forward:\n\n1. Include and instantiate `mongo-rest`.\n2. Provide `mongo-rest` with the [mongoose models][mongoose model] you want to support.\n3. Create a view file for each resource you want rendered as HTML.\n4. Optionally you can also define interceptors in case you want some resources to be handled exceptionally.\n\nThat's it, you're done.\n\n\n### 1. Including and instantiating mongo-rest\n\nMongoREST exposes a class you instatiate with your options:\n\n```js\nvar MongoRest = require('mongo-rest')\n  , mongoRest = new MongoRest(app, { ...options... });\n// or simply:\nvar mongoRest = new require('mongo-rest')(app, { ...options... });\n```\n\nThe options for MongoRest are:\n\n- `urlRoot: \"/\"` The URL root\n- `pathPrefix: \"\"` The path prefix for the rest resources.\n- `pathSuffix: \"\"` The path prefix for the rest resources.\n\nSo this configuration: `{ urlRoot: \"/my-resources/\", pathPrefix: \"my-\", pathSuffix: \"-models\" }`\nwill expose the `User` model at this URL: `/my-resources/my-users-models`\n\n- `viewPrefix: \"resource_\"` Will be prepended to the template name\n- `viewSuffix: \"\"` Will be appended to the template name\n\nSo the configuration: `{ viewPrefix: \"entity-views/resource_\", viewSuffix: \"_template\" }`\nwill render a singular entity with the view `/entity_views/resource_user_template`\nand a collection with `/entity_views/resource_users_template`.\n\n\n- `viewDataNamePrefix: \"\"` Will be prepended to the data index\n- `viewDataNameSuffix: \"\"` Will be appended to the data index\n\nWhen the user model is rendered as HTML, normally the entity is put in the `user`\nand collections are put in the `users` model variables. So in your `jade` template\nyou can iterate over the collections with `each user in users` etc...\nWith `viewDataNamePrefix` and `viewDataNameSuffix` you can change those names.\n\n\n- `camelizeJSONDataKeys: true` If false, all keys will be underscored.\n\n- `JSONDataNamePrefix: \"\"` Will be prepended to the data index\n- `JSONDataNameSuffix: \"\"` Will be appended to the data index\n\nThis is the same as for the `viewDataName*` configs, except for the JSON objects.\nSo the JSON returned would be: `{ \"prefix_user_suffix\": { ...data... } }` or\n`{ \"prefix_users_suffix\": [ ...entities... ] }`\n\n(If this is not enough flexibility for you, you can overwrite the \n`serializeDataObjectKey` and `deserializeDataObjectKey` function)\n\n- `enableXhr: false` Enables a JSON interface for XMLHttpRequests.\n    **Make sure you don't leak important information!**\n- `singleView: true` Whether there is a single view or not.\n  If not, only the collection view will be used.\n    \n\n\nWhen instantiated, MongoREST registers the routes with the `app` so that all REST routes\nbecome accessible. If you provided `'/resources/'` as `pathPrefix` then following urls will\nbecome alive for the `user` resource:\n\n    GET: /url-root/users (Renders a list of all users)\n    POST: /url-root/users (Creates a new user)\n\n    GET: /url-root/users/12345 (Renders the user with ID 12345)\n    PUT: /url-root/users/12345 (Updates the user with ID 12345)\n    DELETE: /url-root/users/12345 (Deletes the user with ID 12345)\n\n\n> **Note:** `/user` and `/users` are always both valid. So you can always access\n> your records on the plural or singular URLs. It's up to you.\n\n### 2. Adding a mongoose model as resource\n\nTo tell `mongo-rest` which resources it should support you simple add each [mongoose model].\nNormally you do this in the same place you define your routes. The code is quite straight\nforward:\n\n```js\nmongoRest.addResource(require('../models/user'));\n\n// And you can pass options:\nmongoRest.addResource(require('../models/user'), {\n  sort: \"name username -birthdate\", // Default sorting\n  // And all class options can be used here to be overriden for this resource:\n  viewPrefix: \"my_cool_resource_\",\n  enableXhr: false, // Shouldn't be served as JSON\n  singleView: true\n});\n```\n\nA few things differ from the class options here. Using the `prefix` and `suffix`\nconfigurations here don't work, but instead you can directly set the names.\n\nSo the options are:\n\n- `entityView`\n- `collectionView`\n- `entityViewDataName`\n- `collectionViewDataName`\n- `entityJSONDataName`\n- `collectionJSONDataName`\n\n\nThat's it. Now MongoREST nows that it has to use those models whenever the resources `users`\nor `hobbies` are accessed.\n\n\n\n### 3. Create your views\n\nWhen you access `/resources/users` for example, MongoREST will try to render\nthis list. To do this it will need a template files.\n\nTwo template files are needed for each resource to...\n\n  1. ...render a list of the resource\n  2. ...render a single resource\n\nTo define where the views are located and how thy are named, look at the `viewPrefix`\nand `viewSuffix` options.\n\n\n\n### 4. Create interceptors (Optional)\n\nSometimes some actions need to be taken before or after inserting, updating or deleting records.\n\nYou register an interceptor like this:\n\n```js\nvar eventName = 'post.success'\n  , handler = function(info, done, req, res, next) { /* Do stuff */ done(); };\n\nmongoRest.addInterceptor(require(\"../models/user\"), eventName, handler);\n// You can also provide the same handler for multiple event names:\nmongoRest.addInterceptor(require(\"../models/user\"), [ 'post', 'put' ], handler);\n```\n\nThe available event names are:\n\n  - `get` Called when a resource is retrieved.\n  - `post`, `post.success`, `post.error` Called when a new resource is posted.\n  - `put`, `put.success`, `put.error` Called when a resource is updated.\n  - `delete`, `delete.success`, `delete.error` Called when a resource is deleted.\n\nIf you simply use the event name without `.success` or `.error` it will be called **before**\nthe event will be carried out.\n\nThe parameters provided to the handler are:\n\n  - `info` An object containing the `doc` and or the `values` that will be used to update the record\n  - `done` A callback that **has to be called** as soon as the interceptor is finished handling the event.\n           (this allows for asynchronous interceptors).\n           If there was an error during the execution of an interceptor, call this function with\n           the `err` object as first parameter. The invokation of the other interceptors will\n           be canceled (if possible).\n  - `req`\n  - `res`\n  - `next`\n\n\nAn example of an interceptor could look like this:\n\n```js\n/**\n * Intercepts posts and puts for guestbook-messages. It compiles the provided textSource with jade, and stores\n * the old textSource in a textVersions array to provide a history.\n */\nmongoRest.addInterceptor(require(\"../models/guestbook-message\"), [ 'post', 'put' ], function(info, done) {\n  // Compile the new textSource value with jade, and put the compiled code in textHtml\n  info.values.textHtml = (jade.compile(info.values.textSource))({});\n  // Since there is no existing doc when posting a new resource, we test if it exists...\n  if (info.doc) {\n    // ...and if it does we add the old textSource to the textVersions array to have a history.\n    info.doc.textVersions.push(info.doc.textSource);\n  }\n  // Tell mongoRest that the interceptor finished intercepting the request.\n  done();\n});\n```\n\n## XMLHttpRequests\n\nMongo-REST supports XMLHttpRequest, but since it could be a security risk, they are disabled by default.\nIf you want to enable them simply pass the option `enableXhr`.\n\nThe responses from Mongo-REST for XMLHttpRequests are always JSON and look like this:\n\n```js\n// If everything went right for entities:\n{ user: doc }\n// If everything went right for collections:\n{ users: docs }\n```\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Matias Meno &lt;m@tias.me&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this\nsoftware and associated documentation files (the 'Software'), to deal in the Software\nwithout restriction, including without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software, and to permit persons\nto whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or\nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n\n[mongoose model]: http://mongoosejs.com/docs/model-definition.html",
  "readmeFilename": "Readme.md",
  "_id": "mongo-rest@3.0.7",
  "dist": {
    "shasum": "82de623ac32b0307a62c2c1259f504fc6b44e421"
  },
  "_resolved": "git://github.com/enyo/mongo-rest.git#d22ca3a7b8b583abf868df06da5753cafe74f799",
  "_from": "mongo-rest@git://github.com/enyo/mongo-rest.git"
}
